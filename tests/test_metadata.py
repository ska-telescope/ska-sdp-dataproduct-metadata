"""Test Generating Metadata File."""

import logging
import os

import pytest
import yaml

from ska_sdp_dataproduct_metadata import MetaData

LOG = logging.getLogger("metadata-test")
LOG.setLevel(logging.DEBUG)

PATH_LIST = [
    {"path": "vis.ms", "description": "raw visibilities"},
    {"path": "vis_new.ms", "description": "extra visibilities"},
]
INPUT_FILE = "tests/resources/test_metadata_default.yaml"
OUTPUT_PATH = "tests/resources/temp_output_metadata.yaml"
OUTPUT_METADATA = "tests/resources/expected_metadata.yaml"
UPDATED_METADATA = "tests/resources/expected_updated_metadata.yaml"


def test_create():
    """
    Test the creation of the Metadata file using
    default parameters
    """

    LOG.info("Create Metadata file")

    metadata = MetaData(
        input_file=INPUT_FILE,
        eb_id="eb-test-20220916-00000",
        pb_id="pb-test-20220916-00000",
        processing_script="vis-receive",
        path_list=PATH_LIST,
        output_path=OUTPUT_PATH,
    )
    metadata.create()
    metadata = read_file(OUTPUT_PATH)
    expected_metadata = read_file(OUTPUT_METADATA)
    assert metadata == expected_metadata

    # Clean up
    delete_file(OUTPUT_PATH)


def test_update_status():
    """Test updating the status of the files"""
    metadata = MetaData(
        input_file=INPUT_FILE,
        eb_id="eb-test-20220916-00000",
        pb_id="pb-test-20220916-00000",
        processing_script="vis-receive",
        path_list=PATH_LIST,
        output_path=OUTPUT_PATH,
    )
    metadata.create()
    metadata.update_status(OUTPUT_PATH, "vis.ms", "done")
    updated_file = read_file(OUTPUT_PATH)
    expected_update_metadata = read_file(UPDATED_METADATA)

    assert updated_file == expected_update_metadata

    # Clean up
    delete_file(OUTPUT_PATH)


def read_file(file):
    """Read and load files into yaml"""
    with open(file, "r", encoding="utf8") as input_file:
        data = yaml.safe_load(input_file)
    return data


def delete_file(file):
    """Delete output files generated by the tests"""
    # Delete created metadata
    if os.path.exists(file):
        os.remove(file)
    else:
        LOG.info("The file does not exist")


def test_create_no_eb_id():
    """
    Check that ValueError is raised when there is no execution block ID"
    """

    with pytest.raises(ValueError, match=r"Execution Block ID is None!"):
        metadata = MetaData(
            input_file=INPUT_FILE,
            pb_id="pb-test-20220916-00000",
            processing_script="vis-receive",
            path_list=PATH_LIST,
            output_path=OUTPUT_PATH,
        )
        metadata.create()


def test_create_no_pb_id():
    """
    Check that ValueError is raised when there is no processing block ID"
    """

    with pytest.raises(ValueError, match=r"Processing Block ID is None!"):
        metadata = MetaData(
            input_file=INPUT_FILE,
            eb_id="eb-test-20220916-00000",
            processing_script="vis-receive",
            path_list=PATH_LIST,
            output_path=OUTPUT_PATH,
        )
        metadata.create()


def test_create_no_processing_script():
    """
    Check that ValueError is raised when there is no processing script"
    """

    with pytest.raises(ValueError, match=r"Processing Script is None!"):
        metadata = MetaData(
            input_file=INPUT_FILE,
            eb_id="eb-test-20220916-00000",
            pb_id="pb-test-20220916-00000",
            path_list=PATH_LIST,
            output_path=OUTPUT_PATH,
        )
        metadata.create()
